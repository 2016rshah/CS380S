<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>bench1/simplified-product-incorrect.c</default>
 </key>
 <key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
 <key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
 <key attr.name="namedValue" attr.type="string" for="node" id="named"/>
 <key attr.name="nodeType" attr.type="string" for="node" id="nodetype">
  <default>path</default>
 </key>
 <key attr.name="isFrontierNode" attr.type="boolean" for="node" id="frontier">
  <default>false</default>
 </key>
 <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
  <default>false</default>
 </key>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
  <default>false</default>
 </key>
 <key attr.name="isLoopHead" attr.type="boolean" for="node" id="loopHead">
  <default>false</default>
 </key>
 <key attr.name="violatedProperty" attr.type="string" for="node" id="violatedProperty"/>
 <key attr.name="threadId" attr.type="string" for="edge" id="threadId"/>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="sourcecode" attr.type="string" for="edge" id="sourcecode"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="startoffset" attr.type="int" for="edge" id="startoffset"/>
 <key attr.name="lineColSet" attr.type="string" for="edge" id="lineCols"/>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
 <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
 <key attr.name="predecessor" attr.type="string" for="edge" id="predecessor"/>
 <key attr.name="successor" attr.type="string" for="edge" id="successor"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <graph edgedefault="directed">
  <data key="witness-type">violation_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 1.6.1</data>
  <data key="programfile">bench1/simplified-product-incorrect.c</data>
  <data key="programhash">d5bd3a19f3d6f7d1da47f57c2eb9e5f154a01541</data>
  <data key="memorymodel">precise</data>
  <data key="architecture">32bit</data>
  <node id="A0">
   <data key="entry">true</data>
  </node>
  <node id="A13_5_1"/>
  <edge source="A0" target="A13_5_1">
   <data key="sourcecode">int A1 = 101;</data>
   <data key="startline">8</data>
   <data key="startoffset">1710</data>
  </edge>
  <node id="A13_8_1"/>
  <edge source="A13_5_1" target="A13_8_1">
   <data key="sourcecode">int rng1;</data>
   <data key="startline">11</data>
   <data key="startoffset">1731</data>
  </edge>
  <node id="A13_9_1"/>
  <edge source="A13_8_1" target="A13_9_1">
   <data key="sourcecode">int rng2;</data>
   <data key="startline">12</data>
   <data key="startoffset">1743</data>
  </edge>
  <node id="A13"/>
  <edge source="A13_9_1" target="A13">
   <data key="sourcecode">p1()</data>
   <data key="startline">13</data>
   <data key="startoffset">1758</data>
  </edge>
  <node id="A14"/>
  <edge source="A13" target="A14">
   <data key="sourcecode">[__CPAchecker_TMP_0 == 0]</data>
   <data key="startline">13</data>
   <data key="startoffset">1758</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="sink">
   <data key="sink">true</data>
  </node>
  <edge source="A13" target="sink">
   <data key="sourcecode">[!(__CPAchecker_TMP_0 == 0)]</data>
   <data key="startline">13</data>
   <data key="startoffset">1758</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A18_0_2"/>
  <edge source="A14" target="A18_0_2">
   <data key="sourcecode">int seed1 = A1;</data>
   <data key="startline">18</data>
   <data key="startoffset">1855</data>
  </edge>
  <node id="A18_1_2"/>
  <edge source="A18_0_2" target="A18_1_2">
   <data key="sourcecode">int seed2 = A1;</data>
   <data key="startline">19</data>
   <data key="startoffset">1875</data>
  </edge>
  <node id="A19"/>
  <edge source="A18_1_2" target="A19">
   <data key="sourcecode">[seed1 == seed2]</data>
   <data key="startline">20</data>
   <data key="startoffset">1999</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A18_1_2" target="sink">
   <data key="sourcecode">[!(seed1 == seed2)]</data>
   <data key="startline">20</data>
   <data key="startoffset">1999</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A22"/>
  <edge source="A19" target="A22">
   <data key="sourcecode">(void) (0)</data>
   <data key="startline">20</data>
   <data key="startoffset">2078</data>
  </edge>
  <node id="A23_0_3"/>
  <edge source="A22" target="A23_0_3">
   <data key="sourcecode">((
# 20 "bench1/simplified-product-incorrect.c"
   seed1 == seed2
# 20 "bench1/simplified-product-incorrect.c" 3 4
   ) ? (void) (0) : __assert_fail (
# 20 "bench1/simplified-product-incorrect.c"
   "seed1 == seed2"
# 20 "bench1/simplified-product-incorrect.c" 3 4
   , "bench1/simplified-product-incorrect.c", 20, __PRETTY_FUNCTION__))
# 20 "bench1/simplified-product-incorrect.c"
                         ;</data>
   <data key="startline">20</data>
   <data key="startoffset">1948</data>
  </edge>
  <node id="A23"/>
  <edge source="A23_0_3" target="A23">
   <data key="sourcecode">p2()</data>
   <data key="startline">21</data>
   <data key="startoffset">2361</data>
  </edge>
  <node id="A24"/>
  <edge source="A23" target="A24">
   <data key="sourcecode">[__CPAchecker_TMP_2 == 0]</data>
   <data key="startline">21</data>
   <data key="startoffset">2364</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A23" target="sink">
   <data key="sourcecode">[!(__CPAchecker_TMP_2 == 0)]</data>
   <data key="startline">21</data>
   <data key="startoffset">2364</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A29_0_4"/>
  <edge source="A24" target="A29_0_4">
   <data key="sourcecode">rng1 = seed1;</data>
   <data key="startline">26</data>
   <data key="startoffset">2484</data>
  </edge>
  <node id="A31"/>
  <edge source="A29_0_4" target="A31">
   <data key="sourcecode">[!(rng1 == rng2)]</data>
   <data key="startline">28</data>
   <data key="startoffset">2607</data>
   <data key="control">condition-false</data>
  </edge>
  <edge source="A29_0_4" target="sink">
   <data key="sourcecode">[rng1 == rng2]</data>
   <data key="startline">28</data>
   <data key="startoffset">2607</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A33">
   <data key="violation">true</data>
   <data key="violatedProperty">assertion in lines 28-36</data>
  </node>
  <edge source="A31" target="A33">
   <data key="sourcecode">__assert_fail (
# 28 "bench1/simplified-product-incorrect.c"
   "rng1 == rng2"
# 28 "bench1/simplified-product-incorrect.c" 3 4
   , "bench1/simplified-product-incorrect.c", 28, __PRETTY_FUNCTION__)</data>
   <data key="startline">28</data>
   <data key="startoffset">2689</data>
  </edge>
 </graph>
</graphml>
