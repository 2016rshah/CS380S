digraph CFA {
1 [shape="circle" label="N1\n36"]
32 [shape="circle" label="N32\n35"]
33 [shape="circle" label="N33\n34"]
34 [shape="circle" label="N34\n33"]
35 [shape="circle" label="N35\n32"]
36 [shape="circle" label="N36\n31"]
37 [shape="circle" label="N37\n30"]
38 [shape="circle" label="N38\n29"]
39 [shape="circle" label="N39\n28"]
2 [shape="circle" label="N2\n27"]
3 [shape="circle" label="N3\n26"]
4 [shape="circle" label="N4\n25"]
8 [shape="circle" label="N8\n24"]
9 [shape="diamond" label="N9\n23"]
6 [shape="circle" label="N6\n22"]
10 [shape="circle" label="N10\n21"]
0 [shape="circle" label="N0\n0"]
7 [shape="circle" label="N7\n20"]
12 [shape="circle" label="N12\n19"]
13 [shape="circle" label="N13\n18"]
14 [shape="diamond" label="N14\n17"]
16 [shape="circle" label="N16\n16"]
17 [shape="circle" label="N17\n14"]
18 [shape="circle" label="N18\n13"]
21 [shape="circle" label="N21\n12"]
22 [shape="diamond" label="N22\n11"]
20 [shape="circle" label="N20\n10"]
23 [shape="circle" label="N23\n9"]
19 [shape="circle" label="N19\n8"]
25 [shape="circle" label="N25\n7"]
26 [shape="diamond" label="N26\n6"]
28 [shape="circle" label="N28\n5"]
29 [shape="circle" label="N29\n3"]
30 [shape="circle" label="N30\n2"]
5 [shape="circle" label="N5\n1"]
27 [shape="circle" label="N27\n4"]
15 [shape="circle" label="N15\n15"]
node [shape="circle"]
subgraph cluster_main {
label="main()"
1 -> 32 [label="INIT GLOBAL VARS"]
32 -> 33 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
33 -> 34 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
34 -> 35 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
35 -> 36 [label="int p1();"]
36 -> 37 [label="int p2();"]
37 -> 38 [label="int A1 = 101;"]
38 -> 39 [label="int main();"]
39 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="int rng1;"]
3 -> 4 [label="int rng2;"]
4 -> 8 [label="int __CPAchecker_TMP_0;"]
8 -> 9 [label="__CPAchecker_TMP_0 = p1();"]
9 -> 7 [label="[__CPAchecker_TMP_0 == 0]"]
9 -> 6 [label="[!(__CPAchecker_TMP_0 == 0)]"]
6 -> 10 [label="printf(\"Failed to open /dev/urandom with errno \n\");"]
10 -> 0 [label="return -1;"]
7 -> 12 [label="int seed1 = A1;"]
12 -> 13 [label="int seed2 = A1;"]
13 -> 14 [label="void __CPAchecker_TMP_1;"]
14 -> 15 [label="[seed1 == seed2]"]
14 -> 16 [label="[!(seed1 == seed2)]"]
16 -> 17 [label="__assert_fail(\"seed1 == seed2\", \"bench1/simplified-product-incorrect.c\", 20, \"__PRETTY_FUNCTION__\");"]
17 -> 18 [label="0;"]
18 -> 21 [label="int __CPAchecker_TMP_2;"]
21 -> 22 [label="__CPAchecker_TMP_2 = p2();"]
22 -> 19 [label="[__CPAchecker_TMP_2 == 0]"]
22 -> 20 [label="[!(__CPAchecker_TMP_2 == 0)]"]
20 -> 23 [label="printf(\"Failed to read bytes from /dev/urandom as requested, with errno \n\");"]
23 -> 0 [label="return -1;"]
19 -> 25 [label="rng1 = seed1;"]
25 -> 26 [label="void __CPAchecker_TMP_3;"]
26 -> 27 [label="[rng1 == rng2]"]
26 -> 28 [label="[!(rng1 == rng2)]"]
28 -> 29 [label="__assert_fail(\"rng1 == rng2\", \"bench1/simplified-product-incorrect.c\", 28, \"__PRETTY_FUNCTION__\");"]
29 -> 30 [label="0;"]
30 -> 5 [label=""]
5 -> 0 [label="return 0;"]
27 -> 29 [label="0;"]
15 -> 17 [label="0;"]}
}