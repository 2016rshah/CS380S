digraph main {
1 [shape="circle" label="N1\n36"]
32 [shape="circle" label="N32\n35"]
9 [shape="diamond" label="N9\n23"]
7 [shape="circle" label="N7\n20"]
6 [shape="circle" label="N6\n22"]
12 [shape="circle" label="N12\n19"]
14 [shape="diamond" label="N14\n17"]
15 [shape="circle" label="N15\n15"]
16 [shape="circle" label="N16\n16"]
17 [shape="circle" label="N17\n14"]
18 [shape="circle" label="N18\n13"]
22 [shape="diamond" label="N22\n11"]
19 [shape="circle" label="N19\n8"]
20 [shape="circle" label="N20\n10"]
25 [shape="circle" label="N25\n7"]
26 [shape="diamond" label="N26\n6"]
27 [shape="circle" label="N27\n4"]
28 [shape="circle" label="N28\n5"]
29 [shape="circle" label="N29\n3"]
30 [shape="circle" label="N30\n2"]
32 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">32</td><td align="left">void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);</td></tr><tr><td align="right">33</td><td align="left">void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);</td></tr><tr><td align="right">34</td><td align="left">void __assert(const char *__assertion, const char *__file, int __line);</td></tr><tr><td align="right">35</td><td align="left">int p1();</td></tr><tr><td align="right">36</td><td align="left">int p2();</td></tr><tr><td align="right">37</td><td align="left">int A1 = 101;</td></tr><tr><td align="right">38</td><td align="left">int main();</td></tr><tr><td align="right">39</td><td align="left">Function start dummy edge</td></tr><tr><td align="right">2</td><td align="left">int rng1;</td></tr><tr><td align="right">3</td><td align="left">int rng2;</td></tr><tr><td align="right">4</td><td align="left">int __CPAchecker_TMP_0;</td></tr><tr><td align="right">8</td><td align="left">__CPAchecker_TMP_0 = p1();</td></tr></table>>]
32 -> 9[label=""]
6 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">6</td><td align="left">printf(\"Failed to open /dev/urandom with errno \n\");</td></tr><tr><td align="right">10</td><td align="left">return -1;</td></tr></table>>]
6 -> 0[label=""]
12 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">12</td><td align="left">int seed2 = A1;</td></tr><tr><td align="right">13</td><td align="left">void __CPAchecker_TMP_1;</td></tr></table>>]
12 -> 14[label=""]
18 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">18</td><td align="left">int __CPAchecker_TMP_2;</td></tr><tr><td align="right">21</td><td align="left">__CPAchecker_TMP_2 = p2();</td></tr></table>>]
18 -> 22[label=""]
20 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">20</td><td align="left">printf(\"Failed to read bytes from /dev/urandom as requested, with errno \n\");</td></tr><tr><td align="right">23</td><td align="left">return -1;</td></tr></table>>]
20 -> 0[label=""]
30 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">30</td><td align="left"></td></tr><tr><td align="right">5</td><td align="left">return 0;</td></tr></table>>]
30 -> 0[label=""]
1 -> 32 [label="INIT GLOBAL VARS" fontname="Courier New"]
9 -> 7 [label="[__CPAchecker_TMP_0 == 0]" fontname="Courier New"]
9 -> 6 [label="[!(__CPAchecker_TMP_0 == 0)]" fontname="Courier New"]
7 -> 12 [label="int seed1 = A1;" fontname="Courier New"]
14 -> 15 [label="[seed1 == seed2]" fontname="Courier New"]
14 -> 16 [label="[!(seed1 == seed2)]" fontname="Courier New"]
17 -> 18 [label="0;" fontname="Courier New"]
22 -> 19 [label="[__CPAchecker_TMP_2 == 0]" fontname="Courier New"]
22 -> 20 [label="[!(__CPAchecker_TMP_2 == 0)]" fontname="Courier New"]
19 -> 25 [label="rng1 = seed1;" fontname="Courier New"]
26 -> 27 [label="[rng1 == rng2]" fontname="Courier New"]
26 -> 28 [label="[!(rng1 == rng2)]" fontname="Courier New"]
29 -> 30 [label="0;" fontname="Courier New"]
27 -> 29 [label="0;" fontname="Courier New"]
16 -> 17 [label="__assert_fail(\"seed1 == seed2\", \"bench1/simplified-product-incorrect.c\", 20, \"__PRETTY_FUNCTION__\");" fontname="Courier New"]
25 -> 26 [label="void __CPAchecker_TMP_3;" fontname="Courier New"]
28 -> 29 [label="__assert_fail(\"rng1 == rng2\", \"bench1/simplified-product-incorrect.c\", 28, \"__PRETTY_FUNCTION__\");" fontname="Courier New"]
15 -> 17 [label="0;" fontname="Courier New"]
}