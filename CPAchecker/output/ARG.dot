digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N1\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
12 [label="12 @ N32\nmain\n" id="12"]
13 [label="13 @ N9\nmain\n" id="13"]
15 [label="15 @ N6\nmain\n" id="15"]
16 [label="16 @ N10\nmain\n" id="16"]
28 [fillcolor="orange" label="28 @ N0\nmain exit\n" id="28"]
14 [label="14 @ N7\nmain\n" id="14"]
18 [label="18 @ N14\nmain\n" id="18"]
20 [label="20 @ N16\nmain\n" id="20"]
19 [label="19 @ N15\nmain\n" id="19"]
22 [label="22 @ N17\nmain\n" id="22"]
23 [label="23 @ N22\nmain\n" id="23"]
25 [label="25 @ N20\nmain\n" id="25"]
26 [label="26 @ N23\nmain\n" id="26"]
24 [label="24 @ N19\nmain\n" id="24"]
29 [label="29 @ N26\nmain\n" id="29"]
31 [label="31 @ N28\nmain\n" id="31"]
33 [fillcolor="red" label="33 @ N29\nmain\nAbstractionState: ABS3\n AutomatonState: AssertionAutomaton: _predefinedState_ERROR\n" id="33"]
30 [fillcolor="orange" label="30 @ N27\nmain\n" id="30"]
0 -> 12 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 12"]
12 -> 13 [color="red" label="Lines 30 - 61: \lvoid __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);\lvoid __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);\lvoid __assert(const char *__assertion, const char *__file, int __line);\lint p1();\lint p2();\lint A1 = 101;\lint main();\lFunction start dummy edge\lint rng1;\lint rng2;\lint __CPAchecker_TMP_0;\l__CPAchecker_TMP_0 = p1();\l" id="12 -> 13"]
13 -> 14 [color="red" label="Line 61: \l[__CPAchecker_TMP_0 == 0]\l" id="13 -> 14"]
13 -> 15 [label="Line 61: \l[!(__CPAchecker_TMP_0 == 0)]\l" id="13 -> 15"]
15 -> 16 [label="Line 62: \lprintf('Failed to open /dev/urandom with errno \n');\l" id="15 -> 16"]
16 -> 28 [label="Line 63: \lreturn -1;\l" id="16 -> 28"]
14 -> 18 [color="red" label="Lines 66 - 70: \lint seed1 = A1;\lint seed2 = A1;\lvoid __CPAchecker_TMP_1;\l" id="14 -> 18"]
18 -> 19 [color="red" label="Line 70: \l[seed1 == seed2]\l" id="18 -> 19"]
18 -> 20 [label="Line 70: \l[!(seed1 == seed2)]\l" id="18 -> 20"]
19 -> 22 [color="red" label="Line 70: \l0;\l" id="19 -> 22"]
22 -> 23 [color="red" label="Lines 70 - 81: \l0;\lint __CPAchecker_TMP_2;\l__CPAchecker_TMP_2 = p2();\l" id="22 -> 23"]
23 -> 24 [color="red" label="Line 81: \l[__CPAchecker_TMP_2 == 0]\l" id="23 -> 24"]
23 -> 25 [label="Line 81: \l[!(__CPAchecker_TMP_2 == 0)]\l" id="23 -> 25"]
25 -> 26 [label="Line 82: \lprintf('Failed to read bytes from /dev/urandom as requested, with errno \n');\l" id="25 -> 26"]
26 -> 28 [label="Line 83: \lreturn -1;\l" id="26 -> 28"]
24 -> 29 [color="red" label="Lines 86 - 90: \lrng1 = seed1;\lvoid __CPAchecker_TMP_3;\l" id="24 -> 29"]
29 -> 30 [label="Line 90: \l[rng1 == rng2]\l" id="29 -> 30"]
29 -> 31 [color="red" label="Line 90: \l[!(rng1 == rng2)]\l" id="29 -> 31"]
31 -> 33 [color="red" label="Line 90: \l__assert_fail('rng1 == rng2', 'bench1/simplified-product-incorrect.c', 28, '__PRETTY_FUNCTION__');\l" id="31 -> 33"]
}
